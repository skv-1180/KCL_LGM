{
	"Binary Exponentiation": {
		"prefix": "bin_exp",
		"scope": "cpp",
		"body": [
		  "template<class T>T bin_exp(T x,T y,ll mod=LONG_LONG_MAX){",
		  "    T ans=1;x%=mod;",
		  "    while(y){",
		  "        if(y&1){",
		  "            ans=(ans*1ll*x)%mod;",
		  "            ans%=mod;",
		  "        }",
		  "        x=(x*1ll*x)%mod;",
		  "        y>>=1;",
		  "    }",
		  "    return ans;",
		  "}"
		],
		"description": ""
	  },
	  "Binary Search": {
		"prefix": "binSer",
		"scope": "cpp",
		"body": [
		  "template<class T> int binarySearch(vector<T>v,T toFind){",
		  "    int low=0,high=v.size()-1;",
		  "    while(high-low>1){",
		  "        int mid=(high+low)/2;",
		  "        if(v[mid]<toFind){low=mid+1;}",
		  "        else{high=mid;}",
		  "    }",
		  "    if(v[low]==toFind)return low;",
		  "    if(v[high]==toFind)return high;",
		  "    return -1;",
		  "}"
		],
		"description": ""
	  },
	  "b times permute": {
		"prefix": "permute",
		"scope": "cpp",
		"body": [
		  "vector<int> applyPermutation(vector<int> sequence, vector<int> permutation) {",
		  "    vector<int> newSequence(sequence.size());",
		  "    for(int i = 0; i < sequence.size(); i++) {",
		  "        newSequence[i] = sequence[permutation[i]-1];",
		  "    }",
		  "    return newSequence;",
		  "}",
		  "",
		  "vector<int> permute(vector<int> sequence, vector<int> permutation, long long b) {",
		  "    while (b > 0) {",
		  "        if (b & 1) {",
		  "            sequence = applyPermutation(sequence, permutation);",
		  "        }",
		  "        permutation = applyPermutation(permutation, permutation);",
		  "        b >>= 1;",
		  "    }",
		  "    return sequence;",
		  "}"
		],
		"description": "b times permute"
	  }
}
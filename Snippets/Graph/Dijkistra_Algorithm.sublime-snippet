<snippet>
	<content><![CDATA[
//T.C.:O((N+E)log(N)) M.C.:O(N);
void dijkstra(int source, vector<int> & ShortestDistance, vector<int> & parent){
    int n = adj.size();
    ShortestDistance.assign(n, INF);
    parent.assign(n, -1);

    ShortestDistance[source] = 0;
    using pii = pair<int, int>;
    priority_queue<pii, vector<pii>, greater<pii>> q;
    q.push({0, source});
    while (!q.empty()) {
        int v = q.top().second;
        int ShortestDistance_v = q.top().first;
        q.pop();
        if (ShortestDistance_v != ShortestDistance[v])continue;
        for (auto edge : adj[v]){
            int to = edge.first;
            int len = edge.second;
            if (ShortestDistance[v] + len < ShortestDistance[to]){
                ShortestDistance[to] = ShortestDistance[v] + len;
                parent[to] = v;
                q.push({ShortestDistance[to], to});
            }
        }
    }
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>dijkistra</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>

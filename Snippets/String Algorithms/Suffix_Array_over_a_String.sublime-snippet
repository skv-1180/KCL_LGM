<snippet>
	<content><![CDATA[
vector<int>p,c,cnt,pn,cn;
vector<int> sort_cyclic_shifts(string const& s) {
    const int alphabet = 256;
    int n = s.size();p.resize(n);c.resize(n);cnt.resize(max(alphabet, n), 0),pn.resize(n),cn.resize(n);
    for (int i = 0; i < n; i++)cnt[s[i]]++;
    for (int i = 1; i < alphabet; i++)cnt[i] += cnt[i-1];
    for (int i = 0; i < n; i++)p[--cnt[s[i]]] = i;
    c[p[0]] = 0;int classes = 1;
    for (int i = 1; i < n; i++) {
        if (s[p[i]] != s[p[i-1]])classes++;
        c[p[i]] = classes - 1;
    }
    for (int h = 0; (1 << h) < n; ++h) {
        for (int i = 0; i < n; i++) {
            pn[i] = p[i] - (1 << h);
            if (pn[i] < 0)pn[i] += n;
        }
        fill(cnt.begin(), cnt.begin() + classes, 0);
        for (int i = 0; i < n; i++)cnt[c[pn[i]]]++;
        for (int i = 1; i < classes; i++)cnt[i] += cnt[i-1];
        for (int i = n-1; i >= 0; i--)p[--cnt[c[pn[i]]]] = pn[i];
        cn[p[0]] = 0;classes = 1;
        for (int i = 1; i < n; i++) {
            pair<int, int> cur = {c[p[i]], c[(p[i] + (1 << h)) % n]};
            pair<int, int> prev = {c[p[i-1]], c[(p[i-1] + (1 << h)) % n]};
            if (cur != prev)classes++;
            cn[p[i]] = classes - 1;
        }
        c.swap(cn);
    }
    return p;
}
//gives starting index of lexicographycially sorted suffixes.
//T.C:O(Nlog(N)) M.C.:O(N);//!returns 0 based indexing
vector<int> suffix_array_construction(string &s){
    s.push_back('$');
    vector<int> sorted_shifts = sort_cyclic_shifts(s);
    sorted_shifts.erase(sorted_shifts.begin());
    s.pop_back();
    return sorted_shifts;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>suffixarray</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>

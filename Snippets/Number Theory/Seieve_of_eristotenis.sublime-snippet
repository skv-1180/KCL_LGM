<snippet>
	<content><![CDATA[
//generate a is_prime checker vector
//TC:O(nlog(log(n))) MC:O(N)
vector<bool> is_prime(N, true);
void generate(int n){
  is_prime[0] = is_prime[1] = false;
  for (int i = 2; i * i <= n; i++) {
      if (is_prime[i]) {
          for (int j = i * i; j <= n; j += i)is_prime[j] = false;
      }
  }
}
//number of primes till n 
//TC:O(n(log(log(n))) MC:O(sqrt(n)+S)
int count_primes(int n) {
    const int S = 10000;
    vector<int> primes;
    int nsqrt = sqrt(n);
    vector<char> is_prime(nsqrt + 2, true);
    for (int i = 2; i <= nsqrt; i++) {
        if (is_prime[i]) {
            primes.push_back(i);
            for (int j = i * i; j <= nsqrt; j += i)
                is_prime[j] = false;
        }
    }
    int result = 0;
    vector<char> block(S);
    for (int k = 0; k * S <= n; k++) {
        fill(block.begin(), block.end(), true);
        int start = k * S;
        for (int p : primes) {
            int start_idx = (start + p - 1) / p;
            int j = max(start_idx, p) * p - start;
            for (; j < S; j += p)block[j] = false;
        }
        if (k == 0)block[0] = block[1] = false;
        for (int i = 0; i < S && start + i <= n; i++) {
            if (block[i])result++;
        }
    }
    return result;
}
//is_prime in [L,R] is_prime(i)=true if L+i is prime
//TC:O(R-L)log(log(R))    MC:O(sqrt(R)+R-L)
vector<char> segmentedSieve(long long L, long long R) {
    // generate all primes up to sqrt(R)
    long long lim = sqrt(R);
    vector<char> mark(lim + 1, false);
    vector<long long> primes;
    for (long long i = 2; i <= lim; ++i) {
        if (!mark[i]) {
            primes.emplace_back(i);
            for (long long j = i * i; j <= lim; j += i)mark[j] = true;
        }
    }
    vector<char> isPrime1(R - L + 1, true);
    for (long long i : primes)
        for (long long j = max(i * i, (L + i - 1) / i * i); j <= R; j += i)
            isPrime1[j - L] = false;
    if (L == 1)isPrime1[0] = false;
    return isPrime1;
}
//do same task as above
//TC:O((R-L)log(R))  MC:O(R-L)
vector<char> segmentedSieveNoPreGen(long long L, long long R) {
    vector<char> isPrime2(R - L + 1, true);
    long long lim = sqrt(R);
    for (long long i = 2; i <= lim; ++i)
        for (long long j = max(i * i, (L + i - 1) / i * i); j <= R; j += i)isPrime2[j - L] = false;
    if (L == 1)isPrime2[0] = false;
    return isPrime2;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>seieve</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
